import Foundation

// Zeroes will be ignored!
// Anything else is part of the pattern.
let hourglassPattern = [
    [1, 1, 1],
    [0, 1],
    [1, 1, 1]
]

struct _2DArrayPosition {
    var line : Int = 0
    var column : Int = 0
    init(_ line: Int, _ column: Int) {
        self.line = line
        self.column = column
    }
}

/**
 Gets the corresponding values from an array relative to the 2DArrayPatter, starting at a given position.
 If the 2DArrayPattern is impossible, nil is returned.
 */
func getPatternValues(from array : [[Int]], startIndex : _2DArrayPosition, _2DArrayPattern : [[Int]]) -> [[Int]]? {
    // Checks if the array has enough lines to hold the pattern from the starting point:
    if (startIndex.line + 1) + (_2DArrayPattern.count - 1) <= array.count {
        var patternValues = [[Int]]()
        for _ in 1..._2DArrayPattern.count {
            patternValues.append([Int]())
        }
        // Checks if each line of the array has enough columns to hold the pattern from the starting point:
        for patternLine in 0..._2DArrayPattern.count - 1 {
            let numberOfValuesToTheRight = array[startIndex.line + patternLine].count - (startIndex.column + 1)
            if numberOfValuesToTheRight - (_2DArrayPattern[patternLine].count - 1) < 0 {
                // Not enough values to the right of the array at line!
                return nil
            } else {
                for index in 0..._2DArrayPattern[patternLine].count - 1 {
                    if _2DArrayPattern[patternLine][index] != 0 {
                        patternValues[patternLine].append(array[startIndex.line + patternLine][index + startIndex.column])
                    }
                }
            }
        }
        // Success! Could get the pattern!
        return patternValues
    }
    // Not enought lines to hold the pattern!
    return nil
}

/** Sums every value from a 2D Array */
func sumsEveryValue(from array : [[Int]]) -> Int {
    var total = 0
    for line in 0...array.count - 1 {
        for column in 0...array[line].count - 1 {
            total += array[line][column]
        }
    }
    return total
}

// Complete the hourglassSum function below.
func hourglassSum(arr: [[Int]]) -> Int {
    var sumArray = [Int]()
    for line in 0...arr.count - 1 {
        for column in 0...arr[line].count - 1 {
            if let hourglassValues = getPatternValues(from: arr, startIndex: _2DArrayPosition(line, column), _2DArrayPattern: hourglassPattern) {
                sumArray.append(sumsEveryValue(from: hourglassValues))
            }
        }
    }
    var biggestSum = sumArray[0]
    for sum in sumArray {
        if sum > biggestSum {
            biggestSum = sum
        }
    }
    return biggestSum
}

// Code automatically generated by Hackerrank:
let stdout = ProcessInfo.processInfo.environment["OUTPUT_PATH"]!
FileManager.default.createFile(atPath: stdout, contents: nil, attributes: nil)
let fileHandle = FileHandle(forWritingAtPath: stdout)!

let arr: [[Int]] = AnyIterator{ readLine() }.prefix(6).map {
    let arrRow: [Int] = $0.split(separator: " ").map {
        if let arrItem = Int($0.trimmingCharacters(in: .whitespacesAndNewlines)) {
            return arrItem
        } else { fatalError("Bad input") }
    }
    
    guard arrRow.count == 6 else { fatalError("Bad input") }
    
    return arrRow
}

guard arr.count == 6 else { fatalError("Bad input") }

let result = hourglassSum(arr: arr)

fileHandle.write(String(result).data(using: .utf8)!)
fileHandle.write("\n".data(using: .utf8)!)

